Link - https://leetcode.com/problems/maximum-width-of-binary-tree/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Pair{
    TreeNode node;
    int num;
    
    public Pair(TreeNode node, int num){
        this.node = node;
        this.num = num;
    }
}
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        
        Deque<Pair> deque = new ArrayDeque<>();
        deque.addLast(new Pair(root,0));
        int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE, count = 0, overallMax = Integer.MIN_VALUE;
        while(!deque.isEmpty()){
            int size = deque.size();
            
            while(size != 0){
                Pair curr = deque.removeFirst();
                size--;
                min = Math.min(curr.num,min);
                max = Math.max(curr.num,max);
                overallMax = Math.max(overallMax,1 + max - min);
                int leftAdd = ((curr.num) << 1) + 1;
                int rightAdd = ((curr.num) << 1) + 2;
                if(curr.node.left != null) deque.addLast(new Pair(curr.node.left, leftAdd));
                if(curr.node.right != null) deque.addLast(new Pair(curr.node.right,rightAdd));
            }
             min = Integer.MAX_VALUE; max = Integer.MIN_VALUE;
            
        }
        
        return overallMax;
    }
}






