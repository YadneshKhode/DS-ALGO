class Solution{
    public ArrayList<Integer> firstAndLast(int arr[], int n, int x){
        // Code here
        ArrayList<Integer> res = new ArrayList<>();
        
        
        int first =  getFirstIndex(arr,n,x);
        int second =  getLastIndex(arr,n,x);
        
        if(first == -1 && second == -1){
            res.add(-1);
        }
        else{
            res.add(first);
            res.add(second); 
        }
     
        
        return res;
    }
    
    // when we find mid == key just keep the Binary search  on in the left side of the mid
    // and whenever we find mid == key just update the result with new index of leftmost key found
    public int getFirstIndex(int arr[], int n, int x){
        int result = n, low = 0, high = n-1;
        
        while(low <= high){
            int mid = (low + high) >>> 1;
            if(arr[mid] == x){
                result = Math.min(result,mid);
                high = mid - 1;
            }
            else if(arr[mid] < x) low = mid + 1;
            else high = mid-1;
        }
        
        return result == n ? -1 : result;
        
        // for(int i = 0; i < arr.length; i++){
        //     if(arr[i] == x) return i;
        // }
        // return -1;
        
    }
    public int getLastIndex(int arr[], int n, int x){
          int result = -1, low = 0, high = n-1;
        
        while(low <= high){
            int mid = (low + high) >>> 1;
            if(arr[mid] == x){
                result = Math.max(result,mid);
                low = mid + 1;
            }
            else if(arr[mid] < x) low = mid + 1;
            else high = mid-1;
        }
        
        return result;
        //   for(int i = arr.length - 1; i >= 0; i--){
        //     if(arr[i] == x) return i;
        // }
        // return -1;
    }
}