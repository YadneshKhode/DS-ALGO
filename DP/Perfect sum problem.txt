
class Solution{

	public int perfectSum(int arr[],int n, int sum) 
	{
	    int mod = 1000000007;
	    int [][]dp = new int[n+1][sum+1];
	    
	    for(int j = 0; j < sum+1; j++){
	       dp[0][j] = 0;
	    }
	    
	    for(int i = 0; i < n+1; i++){
	        dp[i][0] = 1;
	    }
	    
	     for(int i = 1; i < n+1; i++){
	          for(int j = 1; j < sum+1; j++){
	              if(arr[i-1] <= j){
	                  dp[i][j] =((dp[i-1][j-arr[i-1]])%(mod) + (dp[i-1][j])%(mod)) % mod;
	              }
	              else{
	                  dp[i][j] = (dp[i-1][j])% mod;
	              }
	          }
	     }
	    
	    
	    //return subsetSum(arr,n,sum,dp);
	    return dp[n][sum];
	       
	}
	public int subsetSum(int[]arr, int n, int sum,int[][]dp){
	    
	    if(dp[n][sum] != -1) return dp[n][sum];
	    
	    if(sum == 0){
	        dp[n][sum] = 1;
	    }
	    
	    else if(n == 0) {
	        dp[n][sum] = 0;
	    }
	    
	   else if(arr[n-1] <= sum){
	     dp[n][sum] = ((subsetSum(arr,n-1,sum-arr[n-1],dp) % (1000000007)) + (subsetSum(arr,n-1,sum,dp) % (1000000007))) % 1000000007;
	        
	    }
	    else{
	        dp[n][sum] = (subsetSum(arr,n-1,sum,dp) % (1000000007));
	    }
	    
	     return dp[n][sum];
	}
}