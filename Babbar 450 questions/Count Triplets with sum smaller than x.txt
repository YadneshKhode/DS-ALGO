/*

Consider an array {4, 6, 8, 12, 15, 18, 20} with sum = 29. 
The outer most loop will fix the i (1st element), so in the first iteration
we have fixed one of our element to be 4. 
Now we need to find the pairs whose sum is less than 25.
Starting with start=1, end=6; 6+20=26>25, this pair do not contribute to ans so end--. 
start=1, end=5; 6+18=24<25, now observe that along with {6, 18};
sum of pairs {6, 15}, {6, 12} and {6, 8} are also less than 25.
So with i and start fixed there are end-start (5-1=4 in this case) triplets.

Hope that makes sense.

*/

class Solution
{
    long countTriplets(long arr[], int n,int sum)
    {
        
        int count = 0;
        
        Arrays.sort(arr);
        for(int i=0;i<n-2;i++){
            int start = i+1;
            int end = n-1;
            long target = sum - arr[i];
            while(start < end){
               
                if(arr[start] + arr[end] + arr[i] >= target){
                    end--;
                }
                else{
                    count = count + end - start;
                    start++;
                }
            }
            
        }
        return count;
    }
}