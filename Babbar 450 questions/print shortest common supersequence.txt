class Solution {
    public String shortestCommonSupersequence(String str1, String str2) {
        int m = str1.length();
        int n = str2.length();

        int[][] dp = new int[m + 1][n + 1];

        for (int i = 0; i <= m; i++)
        {
            for (int j = 0; j <= n; j++)
            {
                if(i == 0 || j == 0) dp[i][j] = 0;
            }
        }
        for (int i = 1; i <= m; i++)
        {
            for (int j = 1; j <= n; j++)
            {
               if(str1.charAt(i-1) == str2.charAt(j-1)){
                   dp[i][j] = 1 + dp[i-1][j-1];
               }
               else{
                   dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);
               }
            }
        }
        System.out.print(dp[m][n]);
        int maxi = m;
        int maxj = n;
        StringBuilder s = new StringBuilder(); ;
        
        while(maxi > 0 && maxj > 0){
            if(str1.charAt(maxi-1) == (str2.charAt(maxj-1))){
                s.append(str1.charAt(maxi-1));
                maxi--;
                maxj--;
            }
            else{
                if(dp[maxi][maxj-1] > dp[maxi-1][maxj]){
                    s.append(str2.charAt(maxj-1));
                    maxj--;
                }
                else{
                    s.append(str1.charAt(maxi-1));
                    maxi--;
                }
            }
        }
        while(maxi > 0){
            s.append(str1.charAt(maxi-1));
            maxi--;
        }
        while(maxj > 0){
            s.append(str2.charAt(maxj-1));
            maxj--;
        }
       return s.reverse().toString();
    }

}