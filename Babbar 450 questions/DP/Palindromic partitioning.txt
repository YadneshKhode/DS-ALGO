class Solution{
    static int palindromicPartition(String str)
    {
        // code here
       int[][]dp = new int[str.length()+1][str.length()+1];
       
       for(int i = 0; i <= str.length(); i++){
           for(int j = 0; j <= str.length(); j++){
               dp[i][j] = -1;
           }
       }
        
        return solve(dp,str,0,str.length()-1);
    }
    static int solve(int[][]dp, String s, int i, int j){
        
        if(dp[i][j] != -1) return dp[i][j];
        
        if(i >= j) return 0;
        
        if(isPalindrome(s,i,j)) return 0;
        
        int min = Integer.MAX_VALUE;
        int temp = -1; 
        
        for(int k = i; k < j; k++){
            temp = solve(dp,s,i,k) + solve(dp,s,k+1,j) + 1;
            
            if(temp < min){
                min = temp;
            }
        }
        dp[i][j] = min;
        
        return min;
        
    }
    static boolean isPalindrome(String s, int i, int j){
        
        int flag = 0;
        int p1 = i;
        int p2 = j;
        
        while(p1 <= p2){
            if(s.charAt(p1) != s.charAt(p2)){
                flag = 1;
                break;
            }
            p1++;
            p2--;
        }
        return flag == 0 ? true : false;
    }
}