class Solution {
    public int findTargetSumWays(int[] nums, int target) {

        int sum = 0, count = 0;
        int n = nums.length;
        
        for(int i=0;i<nums.length;i++){
            sum += nums[i];
// calculating number of 0's
            if(nums[i] == 0) count++;
        }
        
        if(target > sum) return 0;

// Basically s1-s2 = target equation 1
// and s1+s2 = sum   equation 2
// This gives 2s1 = sum+target => s1 = (sum+target)/2
// So, if (sum+diff) is even then only finding s1 is possible.
// if s1 is 4.5 or something in decimal then I cant find that number


        if(((target + sum) & 1) != 0 ) return 0;
        
        int s = (target + sum ) >> 1;


        int dp[][] = new int[n+1][s+1];
        
        for(int i=0;i<=n;i++){
            dp[i][0] = 1;
        }
        for(int i=1;i<=s;i++){
            dp[0][i] = 0;    
        }
  
        for(int i = 1; i <= n; i++){
            for(int j = 1; j<= s; j++){


 // Cnt is for '0's in the array. If we have n number of zeroes then we need to multiply our result of count of subsets with a sum to 2^n.  And we need to not consider this while calculating in bottom-up manner, hence the case " if(nums[i-1]==0) { dp[i][j] = dp[i-1][j] } ".
// For example: If we have 2(cnt=2) zeroes in the example array for which we calculate count of subset with a sum then there are 4(2^cnt) ways that is either selecting first zero, second selecting second 0 present in array, third not selecting both, fourth selecting both.
// Hope this will be helpful.

// basically just ignore 0 values in array

                if(nums[i-1] == 0){
                    dp[i][j] =  dp[i-1][j];
                }
                else if(j < nums[i-1]){
                    dp[i][j] = dp[i-1][j];
                }
                else{
                    dp[i][j] = dp[i-1][j] + dp[i - 1][j - nums[i-1]];
            }
        }
           
        }
        int pow = 1;
        while(count != 0) {
            count--;
            pow = pow << 1;
        }
          return  pow*dp[n][s]; 
    }
}