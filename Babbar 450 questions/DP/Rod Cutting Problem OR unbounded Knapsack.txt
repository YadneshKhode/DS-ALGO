class Solution{
    public int cutRod(int val[], int N) {
        int W = N;
        
        int dp[][] = new int[N + 1][W + 1];
       
        int wt[] = new int[N];
        
        for(int i =1; i <= N; i++ ){
            wt[i - 1] = i;
        }
        
        for (int i = 1; i <= N; i++) {
            for (int j = 1; j <= W; j++) {
                dp[i][j] = -1;
            }
        }
        return knapSack(dp,N,W,val,wt);
    }
     static int knapSack(int [][]dp,int N, int W, int val[], int wt[]){
       if(N == 0 || W == 0){
            return 0;
        }
        
        if(dp[N][W] != -1) return dp[N][W];
        
        if(W >= wt[N-1]){
            dp[N][W] = Math.max(val[N-1] + knapSack(dp,N,W - wt[N-1],val,wt),knapSack(dp,N-1,W,val,wt));
            return dp[N][W];
        }
        else{
            dp[N][W] = knapSack(dp,N-1,W,val,wt);
           return dp[N][W]; 
        }
     }
}

       
       