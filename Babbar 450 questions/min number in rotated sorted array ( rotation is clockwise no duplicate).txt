https://www.youtube.com/watch?v=4WmTRFZilj8&list=PL_z_8CaSLPWeYfhtuKHj-9MpYb6XQJ_f2&index=9

class Solution {
    public int findMin(int[] nums) {
        int n = nums.length;
        int low = 0;
        int high = n-1;
        int ans = nums[0];
        
        while(low <= high){
            
            int mid = low + ((high-low)>>1);
            int prev = (mid - 1 + n)%n;
            int next = (mid + 1)%n;
            System.out.println(prev);
            System.out.println(next);
            if(nums[low] < nums[high]){
                ans =  nums[low];
                break;
            }
            
            else if(nums[mid] < nums[prev] && nums[mid] < nums[next]){
                ans = nums[mid];
                break;
            }
            
            else if(nums[low] <= nums[mid] ){
                low = mid + 1;
            }
            else if(nums[mid] <= nums[high]){
                high = mid - 1;
            }
        }
        return ans;
    }
}



// min number always lies on unsorted part
// if mid is less than mid+1 and mid-1 then mid is smallest

There are few problems with the code:
first of all->
 a) type of rotation=>
           if(array is LEFT rotated then no_of_rotations is equal to (length - index_of_min_element)%length)
           
           if(  array is RIGHT rotated then no_of_rotations = index_of _min_element)
           *for right rotation we might have to make few other changes in the code*
b) one case is missing inside while loop=>
           add this in the beginning of while loop:
            
             if(arr[start] <= arr[end]){
                    return s;
             }
c) this code is applicable with a condition that there are NO REPEATED VALUES
       it is a standard interview problem (search_element_in_rotated_sorted_array )you can find out on leetcode


complete code to find idx_of_min_element (modify it to find the no_of_rotations) ( cide from youtube comment section)

int pivotIdx(vector<int> arr, int n){
	if(arr[0] < arr[n-1]){
		return 0;
	}

	int pivot = -1;
	int s = 0, e = n-1;
	while(s <= e){
                if(arr[s] <= arr[e]){
                     return s;
                 }
		int mid = s + (e-s)/2;
		int next = (mid+1)%n;
		int prev = (mid-1+n)%n;
		if(arr[mid] <= arr[next] && arr[mid] <= arr[prev]){
          
                      pivot = mid;
		      break;
            
		}
		if(arr[s] <= arr[mid]){

                       s = mid + 1;
		}
		else if(arr[mid] <= arr[e]){
			e = mid - 1;
		}

	}
   
	return pivot;
}


